O processo de autenticaçao de API valida a identidade do client que está tentando realizar uma conexão usando um protocolo de autenticação.
Esse protocolo envia as credenciais do client remoto (solicitando a conexão), para o servidor de acesso remoto tanto em texto ou de forma encriptografada.
O servidor entao verifica se ele pode ter acesso ou não.

Lista das maneiras mais comuns de autenticação:
1- JWT Authentication (JSON web token)
2- Token based Authentication
3- Session based Authentication
4- Basic Authentication
5- OAuth - Open Authorization
6- SSO - Single Sign On

How user authentication works?
    O processo é bastante simples; os usuários inserem suas credenciais no formulário de login do site. 
    Essas informações são então enviadas para o servidor de autenticação, onde são comparadas com todas as credenciais do usuário arquivadas.

Top user authentication methods
    Knowledge factors(fatores de conhecimento): username, senha ou numero pin. sao fatores de autenticação fraccos em termos de segurança pois podem ser compartilhados.
    Possession factors(fatores de posse): Tudo que o usuario precisar para fazer o login, além do knowledge factor. exemplo: token de uso unico (magic link),  porta chaves, tokens fisicos e cartoes de identificação.
    Inheritance factors(Fatores de herança): Faz o uso de qualquer caracteristica biologica para autenticação. exemplo: autenticação biometrica como scaneamento de impressão digital ou reconhecimento facial.

Passwordless User Authentication Methods
    Biometrics:
        The user presses his finger on the scanner and waits for the system to grant him access.
        Behind the scenes, the system compares the fingerprint scanned with the original print on file.
        If the two match, the system grants the user access.


1- JWT Authentication (JSON Web Tokens)
    JSON Web Token - o server cria um token para o usuario, e fica responsavel de guardar as informaçoes de responde e request. assim, o servidor será dispensado de armazenar os dados de cada session com cookies.
    playground jwt: https://jwt.io/

    Estrutura do JWT:
        Header: type of token e algoritmo de assinatura
        Payload: dados do usuario e dados adicionais. existem três tipos: 
            claim registrado: iss (emissor), exp(prazo de validade), sub(assunto), aud(audiencia). nao sao obrigatorias, mas fornecem declaraçoes uteis
            claim publica: sao definidas no IANA JWT registry ou como um URI com namespace. podem ser definidas a vontade
            claim privada: sao claims personalizadas para compartilhar informaçoes entre as partes que concordam em usa-las.
        Signature: verifica se a mensagem nao foi alterada durante o percurso, e nos casos de token com chave privada pode verificar se o usuario diz ser quem é.

4- Basic Authentication (Basic auth)
    todos os navegadores tem suporte para autenticaçao HTTP basica. Ela funciona por meio da resposta do servidor.
    O navegador envia um request para o server, o server tenta checkar a disponibilidade do header de autorização no request. por ser o primeiro request, nenhum header de autorização é encontrado no request.
    Apos receber a resposta do servidor o navegador irá mostrar a autenticação popup. entao o navegador encoda as credenciais usando base64 e envia para o server da mesma request. o server ira decodar e verificar as credenciais,
    se forem validas o server mandará uma resposta ao client.
    Fonte: https://roadmap.sh/guides/http-basic-authentication


3- Cookie based
    A autenticação cookie based é a mais usada atualmente para conexao browser-server. 
    O usuario envia seu login e senha para o servidor, que valida e cria uma sessão que é salva no database, respondendo com uma session ID que é salvo no navegador do úsuario graças aos cookies (guarda pares do tipo key-value).
    É vulneraveo a ataques CSRF (Cross-site request forgery)

2- Token Authentication (Token Auth) 
    O client envia os dados de login para o server por meio dos metodos HTTP,  ao invez de guardar os dados no server ele cria um JSON web token para armazenamento. 
    Entao o brower coloca o JWT em armazenamento local, é mais eficiente quando trabalhado com sistemas distribuidos ou nuvem.
FONTES: https://youtu.be/UBUNrFtufWo?si=P39MRMeH4esqnQ4p
